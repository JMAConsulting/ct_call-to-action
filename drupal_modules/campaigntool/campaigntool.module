<?php

function campaigntool_menu() {
  $items = array();

  $items['call-to-action-entry'] = array(
    'title' => 'Enter an Action', 
    'description' => 'Use this form to enter in various calls to action (Events, Petitions or Subscriptions)',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaigntool_form', 1), 
    'access callback' => TRUE
  );
  $items['call-to-action-delete/%'] = array(
    'page callback' => 'campaigntool_cta_delete',
    'page arguments' => array(1), 
    'access callback' => TRUE
  );

  return $items;
}

function campaigntool_cta_delete($action) {
  civicrm_initialize();
  $id = explode('-', $action);
  if ($id[0] == 'event') {
    $params = array(
      'id' => $id[1],
      'version' => 3,
    );
    $result = civicrm_api( 'event','delete',$params );
  }
  elseif($id[0] == 'petition') {
    $params = array(
      'id' => $id[1],
      'version' => 3,
    );
    $result = civicrm_api( 'survey','delete',$params );
  }
  elseif($id[0] == 'profile') {
    $params = array(
      'id' => $id[1],
      'version' => 3,
    );
    $result = civicrm_api( 'uf_group','delete',$params );
  }

  if ($result) {
    echo 1;
  }
  CRM_Utils_System::civiExit();
}

function campaigntool_form($form, &$form_state, $id = NULL) {
  civicrm_initialize();
  $form['#attached']['js'][] = drupal_get_path('module', 'campaigntool') . '/campaigntool.js';
  // handling an update
  if ($id) {
    $actions = explode('-', $id);
    switch($actions[0]) {
      case 'event':
        $params = array(
          'id' => $actions[1],
          'version' => 3,
        );
        $result = civicrm_api('event', 'get', $params);
        $title = $result['values'][$actions[1]]['title'];
        $event = CRM_Utils_Array::value('id', $result);
        $summary =  CRM_Utils_Array::value('summary', $result['values'][$actions[1]]);
        $description = CRM_Utils_Array::value('description', $result['values'][$actions[1]]);
        $start_date = CRM_Utils_Array::value('start_date', $result['values'][$actions[1]]);
        $end_date = CRM_Utils_Array::value('end_date', $result['values'][$actions[1]]);
        $event_type_id = CRM_Utils_Array::value('event_type_id', $result['values'][$actions[1]]);
        $loc_block_id = CRM_Utils_Array::value('loc_block_id', $result['values'][$actions[1]]);
        if ($loc_block_id) {
          $locBlockParams = array(
            'id' => $loc_block_id,
            'version' => 3,
          );
          $locBlock = civicrm_api('loc_block', 'get', $locBlockParams);
          // fetch the address
          if (CRM_Utils_Array::value('address_id', $locBlock['values'][$loc_block_id])) {
            $addressParams = array(
              'id' => CRM_Utils_Array::value('address_id', $locBlock['values'][$loc_block_id]),
              'version' => 3,
            );
            $address = civicrm_api('address', 'get', $addressParams);
            $address_hidden = CRM_Utils_Array::value('id', $address);
            $street_address = CRM_Utils_Array::value('street_address', $address['values'][$address['id']]);
            $add1_address = CRM_Utils_Array::value('supplemental_address_1', $address['values'][$address['id']]);
            $add2_address = CRM_Utils_Array::value('supplemental_address_2', $address['values'][$address['id']]);
            $city = CRM_Utils_Array::value('city', $address['values'][$address['id']]);
            $state = CRM_Utils_Array::value('state', $address['values'][$address['id']]);
            $zip = CRM_Utils_Array::value('postal_code', $address['values'][$address['id']]);
            $suffix = CRM_Utils_Array::value('postal_code_suffix', $address['values'][$address['id']]);
            $country_val = CRM_Utils_Array::value('country_id', $address['values'][$address['id']]);
          }
          // fetch the phone
          if (CRM_Utils_Array::value('phone_id', $locBlock['values'][$loc_block_id])) {
            $phoneParams = array(
              'id' => CRM_Utils_Array::value('phone_id', $locBlock['values'][$loc_block_id]),
              'version' => 3,
            );
            $phone = civicrm_api('phone', 'get', $phoneParams);
            $phone_hidden = CRM_Utils_Array::value('id', $phone);
            $phone = CRM_Utils_Array::value('phone', $phone['values'][$phone['id']]);
          }
          // fetch the email
          if (CRM_Utils_Array::value('email_id', $locBlock['values'][$loc_block_id])) {
            $emailParams = array(
              'id' => CRM_Utils_Array::value('email_id', $locBlock['values'][$loc_block_id]),
              'version' => 3,
            );
            $email = civicrm_api('email', 'get', $emailParams);
            $email_hidden = CRM_Utils_Array::value('id', $email);
            $email = CRM_Utils_Array::value('email', $email['values'][$email['id']]);
          }
        }
        // get more link
        $joinParams = array(
          'entity_id' => $actions[1],
          'entity_table' => 'civicrm_event',
          'module' => 'CiviEvent',
        );
        $ufGroupId = CRM_Core_BAO_UFJoin::findUFGroupId($joinParams);
        $ufFields = CRM_Core_BAO_UFGroup::getFields($ufGroupId);
        foreach($ufFields as $key => $value) {
          if (stristr($key, 'formatting_')) {
            $fields[] = $ufFields[$key]['help_pre'];
          }
        }
        $link = $fields[3];
        break;

      case 'petition': 
        $params = array(
          'id' => $actions[1],
          'version' => 3,
        );
        $result = civicrm_api('survey', 'get', $params);
        $title = $result['values'][$actions[1]]['title'];
        $description = CRM_Utils_Array::value('instructions', $result['values'][$actions[1]]);
        $petition = $actions[1];
        // get more link
        $joinParams = array(
          'entity_id' => $actions[1],
          'entity_table' => 'civicrm_survey',
          'module' => 'CiviCampaign',
        );
        $ufGroupId = CRM_Core_BAO_UFJoin::findUFGroupId($joinParams);
        $ufFields = CRM_Core_BAO_UFGroup::getFields($ufGroupId);
        foreach($ufFields as $key => $value) {
          if (stristr($key, 'formatting_')) {
            $fields[] = $ufFields[$key]['help_pre'];
          }
        }
        $link = $fields[3];
        $summary = $fields[1];
        break;

      case 'profile':
        $params = array(
          'id' => $actions[1],
          'version' => 3,
        );
        $result = civicrm_api('uf_group', 'get', $params);
        $ufFields = CRM_Core_BAO_UFGroup::getFields($result['id']);
        foreach($ufFields as $key => $value) {
          if (stristr($key, 'formatting_')) {
            $fields[] = $ufFields[$key]['help_pre'];
          }
        }
        list($title, $summary, $description, $link) = array_values($fields);
        $actions[0] = 'subscription';
        $profileId = $actions[1];
        break;
    }
  }
  $locationEvents = CRM_Event_BAO_Event::getLocationEvents();
  $locationEvents[0] = "-- select --";
  ksort($locationEvents);
  $stateProvince = CRM_Core_PseudoConstant::stateProvince();
  $country = CRM_Core_PseudoConstant::country();
  $locations = array(
    1 => 'Create new location',
    2 => 'Use Existing Location',
  );
  $options = array(
    'event' => 'Event',
    'petition' => 'Petition',
    'subscription' => 'Subscription',
  );
  $form['action_type'] = array(
    '#type' => 'select',
    '#title' => 'Type of Action?',
    '#required' => TRUE,
    '#options' => $options,
    '#default_value' => isset($actions[0]) ? $actions[0] : NULL,
  );
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => 'Title',
    '#default_value' => isset($title) ? $title : NULL,
    '#required' => TRUE,
  ); 
  $form['summary'] = array(
    '#type' => 'textfield',
    '#title' => 'Summary',
    '#default_value' => isset($summary) ? $summary : NULL,
    '#required' => TRUE, 
  );
  $form['start_date'] = array(
    '#type' => 'date_popup',
    '#title' => 'Event Start Date',
    '#default_value' => isset($start_date) ? $start_date : date('Y-m-d'),
    '#date_format' => 'Y-m-d g:i a',
    '#date_label_position' => 'within',
    '#date_increment' => 15,
    '#date_year_range' => '0:+2',
  );
  $form['end_date'] = array(
    '#type' => 'date_popup',
    '#title' => 'Event End Date',
    '#default_value' => isset($end_date) ? $end_date : date('Y-m-d'),
    '#date_format' => 'Y-m-d g:i a',
    '#date_label_position' => 'within',
    '#date_increment' => 15,
    '#date_year_range' => '0:+2',
  );
  $form['location_fieldset'] = array(
    '#title' => t("Event Location"),
    '#prefix' => '<div id="address-wrapper">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
  );
  $form['location_fieldset']["location_type"] = array(
    '#type' => 'radios',
    '#title' => "Choose Location",
    '#options' => $locations,
    '#default_value' => isset($loc_block_id) ? 2 : NULL,
    '#prefix' => '<div id="location-choice-wrapper">',
    '#suffix' => '</div>',
  );
  $form['location_fieldset']["location"] = array(
      '#type' => 'select',
      '#title' => "Use Location",
      '#options' => $locationEvents,
      '#default_value' => isset($loc_block_id) ? $loc_block_id : 0,
      '#prefix' => '<div id="location-choose-wrapper">',
      '#suffix' => '</div>',
      '#ajax' => array(
        'callback' => 'address_fill_callback',
        'wrapper' => 'address-wrapper',
      ),
    );
  $form['location_fieldset']["street_address"] = array(
      '#type' => 'textfield',
      '#title' => "Street Address",
      '#default_value' => isset($street_address) ? $street_address : NULL,
    );
  $form['location_fieldset']["add1_address"] = array(
      '#type' => 'textfield',
      '#title' => "Addt'l Address 1",
      '#default_value' => isset($add1_address) ? $add1_address : NULL,
    );
  $form['location_fieldset']["add2_address"] = array(
      '#type' => 'textfield',
      '#title' => "Addt'l Address 2",
      '#default_value' => isset($add2_address) ? $add2_address : NULL,
    );
  $form['location_fieldset']["city"] = array(
      '#type' => 'textfield',
      '#title' => "City",
      '#default_value' => isset($city) ? $city : NULL,
    );
  $form['location_fieldset']["zip"] = array(
      '#type' => 'textfield',
      '#title' => "ZipCode",
      '#default_value' => isset($zip) ? $zip : NULL,
    );
  $form['location_fieldset']["suffix"] = array(
      '#type' => 'textfield',
      '#title' => "Suffix",
      '#default_value' => isset($suffix) ? $suffix : NULL,
    );
  $form['location_fieldset']["country"] = array(
      '#type' => 'select',
      '#title' => "City",
      '#options' => $country,
      '#default_value' => isset($country_val) ? $country_val : 1228,
    );
  $form['location_fieldset']["state"] = array(
      '#type' => 'select',
      '#title' => "State/Province",
      '#options' => $stateProvince,
      '#default_value' => isset($state) ? $state : 1001,
    );
  $form['location_fieldset']["email"] = array(
      '#type' => 'textfield',
      '#title' => "Email",
      '#default_value' => isset($email) ? $email : NULL,
    );
  $form['location_fieldset']["phone"] = array(
      '#type' => 'textfield',
      '#title' => "Phone",
      '#default_value' => isset($phone) ? $phone : NULL,
    );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => 'Description',
    '#default_value' => isset($description) ? strip_tags($description) : NULL,
    '#required' => TRUE, 
  );
  $form['link'] = array(
    '#type' => 'textfield',
    '#title' => 'More Link text',
    '#default_value' => isset($link) ? $link : ' >> Learn More and Share',
    '#required' => TRUE,
  ); 
  $form['location_fieldset']['address_hidden'] = array(
    '#type' => 'hidden',
    '#title' => 'Address Hidden',
    '#default_value' => isset($address_hidden) ? $address_hidden : NULL,
  );
  $form['location_fieldset']['email_hidden'] = array(
    '#type' => 'hidden',
    '#title' => 'Email Hidden',
    '#default_value' => isset($email_hidden) ? $email_hidden : NULL,
  );
  $form['location_fieldset']['phone_hidden'] = array(
    '#type' => 'hidden',
    '#title' => 'Phone Hidden',
    '#default_value' => isset($phone_hidden) ? $phone_hidden : NULL,
  );
  $form['location_fieldset']['profile_hidden'] = array(
    '#type' => 'hidden',
    '#title' => 'Profile Hidden',
    '#default_value' => isset($profileId) ? $profileId : NULL,
  );
  $form['location_fieldset']['petition_hidden'] = array(
    '#type' => 'hidden',
    '#title' => 'Petition Hidden',
    '#default_value' => isset($petition) ? $petition : NULL,
  );
  $form['location_fieldset']['event_hidden'] = array(
    '#type' => 'hidden',
    '#title' => 'Event Hidden',
    '#default_value' => isset($event) ? $event : NULL,
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form['actions']['cancel'] = array(
    '#type'   => 'submit',
    '#value'  => t('Cancel'),
    '#submit' => array('campaigntool_cancel_button'),
    '#limit_validation_errors' => array(),
  );
  return $form;
}

function campaigntool_cancel_button($form, &$form_state) {
  $url = 'call-to-action-selection';
  drupal_goto($url);
}

function address_fill_callback($form, &$form_state) {
  $addressId = CRM_Core_DAO::getFieldValue('CRM_Core_DAO_LocBlock', $form_state['values']['location'], 'address_id');
  $emailId = CRM_Core_DAO::getFieldValue('CRM_Core_DAO_LocBlock', $form_state['values']['location'], 'email_id');
  $phoneId = CRM_Core_DAO::getFieldValue('CRM_Core_DAO_LocBlock', $form_state['values']['location'], 'phone_id');
  $addressParams = array(
    'id' => $addressId,
    'version' => 3,
  );
  $address = civicrm_api('Address', 'get', $addressParams);
  $addressParams['id'] = $emailId;
  $email = civicrm_api('Email', 'get', $addressParams);
  $addressParams['id'] = $phoneId;
  $phone = civicrm_api('Phone', 'get', $addressParams);
  $form['location_fieldset']["street_address"]['#value'] = $address['values'][$addressId]['street_address'];
  $form['location_fieldset']["add1_address"]['#value'] = $address['values'][$addressId]['supplementary_address_1'];
  $form['location_fieldset']["add2_address"]['#value'] = $address['values'][$addressId]['supplementary_address_2'];
  $form['location_fieldset']["city"]['#value'] = $address['values'][$addressId]['city'];
  $form['location_fieldset']["zip"]['#value'] = $address['values'][$addressId]['postal_code'];
  $form['location_fieldset']["suffix"]['#value'] = $address['values'][$addressId]['postal_code_suffix'];
  $form['location_fieldset']["country"]['#value'] = $address['values'][$addressId]['country_id'];
  $form['location_fieldset']["state"]['#value'] = $address['values'][$addressId]['state_province_id'];
  $form['location_fieldset']["email"]['#value'] = $email['values'][$emailId]['email'];
  $form['location_fieldset']["phone"]['#value'] = $phone['values'][$phoneId]['phone'];
  $form['location_fieldset']["address_hidden"]['#value'] = $addressId;
  $form['location_fieldset']["phone_hidden"]['#value'] = $phoneId;
  $form['location_fieldset']["email_hidden"]['#value'] = $emailId;
  return $form['location_fieldset'];
}

function campaigntool_form_submit($form, &$form_state) {

  civicrm_initialize();
  $new = $http_value = FALSE;
  $params['type'] = $form_state['values']['action_type'];
  $fieldArray = array(
    1 => $form_state['values']['title'], //Title
    2 => $form_state['values']['summary'], //Summary
    3 => $form_state['values']['description'], //Description
    4 => $form_state['values']['link'], //More Link Name
  );
  $ufjoinId = $ufjointable = NULL;
  if (!(CRM_Utils_Array::value('profile_hidden', $form_state['values']) || 
      CRM_Utils_Array::value('petition_hidden', $form_state['values']) ||
      CRM_Utils_Array::value('event_hidden', $form_state['values']))
  ) {
    $gid = 14;
    $new = TRUE;
    $profile = CRM_Core_BAO_UFGroup::copy($gid);
    $profile->title = $fieldArray[1];
    $profile->save();
    $query = "DELETE FROM civicrm_uf_join
WHERE uf_group_id = {$profile->id} AND module != 'Profile'";
    CRM_Core_DAO::executeQuery($query);
  }
  $save = new CRM_Core_DAO_UFField();
  if (isset($profile)) {
    $id = $profile->id;
  }
  elseif (CRM_Utils_Array::value('profile_hidden', $form_state['values']))  {
    $id = CRM_Utils_Array::value('profile_hidden', $form_state['values']);
    $http_value = 'profile-'.CRM_Utils_Array::value('profile_hidden', $form_state['values']);
  }
  elseif (CRM_Utils_Array::value('petition_hidden', $form_state['values'])) {
    $http_value = 'petition-'.CRM_Utils_Array::value('petition_hidden', $form_state['values']);
    $joinParams = array(
      'entity_table' => 'civicrm_survey',
      'entity_id' => CRM_Utils_Array::value('petition_hidden', $form_state['values']),
      'module' => 'CiviCampaign',
    );
    $id = CRM_Core_BAO_UFJoin::findUFGroupId($joinParams);
  }
  elseif (CRM_Utils_Array::value('event_hidden', $form_state['values'])) {
    $http_value = 'event-'.CRM_Utils_Array::value('event_hidden', $form_state['values']);
    $joinParams = array(
      'entity_table' => 'civicrm_event',
      'entity_id' => CRM_Utils_Array::value('event_hidden', $form_state['values']),
      'module' => 'CiviEvent',
    );
    $id = CRM_Core_BAO_UFJoin::findUFGroupId($joinParams);
  }
  $query = "SELECT id, weight FROM civicrm_uf_field WHERE uf_group_id = {$id}
AND field_type = 'Formatting'";
  $ufField = CRM_Core_DAO::executeQuery($query);
  while ($ufField->fetch()) {
    $save->id = $ufField->id;
    $save->help_pre = $fieldArray[$ufField->weight];
    $save->save();
  }
  switch ($params['type']) {
    case 'subscription':
      $action = "Subscription";
      break;

    case 'event':
      $params = array(
        'id' => CRM_Utils_Array::value('event_hidden', $form_state['values']),
        'title' => $fieldArray[1],
        'summary' => $fieldArray[2],
        'description' => $fieldArray[3],
        'event_type_id' => 1,
        'start_date' => date($form_state['values']['start_date']),
        'end_date' => date($form_state['values']['end_date']),
        'loc_block_id' => ($form_state['values']['location'] != 0) ? $form_state['values']['location'] : NULL,
        'is_public' => 1,
        'is_online_registration' => 1,
        'is_monetary' => 0,
        'is_active' => 1,
        'version' => 3,
      );
 
      $result = civicrm_api('event', 'create', $params);
      // create or update the address
      $addressParams = array( 
        'location_type_id' => 1,
        'street_address' => $form_state['values']['street_address'],
        'supplemental_address_1' => $form_state['values']['add1_address'],
        'supplemental_address_2' => $form_state['values']['add2_address'],
        'postal_code' => $form_state['values']['zip'],
        'postal_code_suffix' => $form_state['values']['suffix'],
        'country_id' => $form_state['values']['country'],
        'state_province_id' => $form_state['values']['state'],
        'city' => $form_state['values']['city'],
        'is_primary' => 1,
        'version' => 3,
      );
      if ($form_state['values']['address_hidden']) {
        $addressParams['id'] = $form_state['values']['address_hidden'];
      }
      $address = CRM_Core_BAO_Address::add($addressParams, TRUE);
      if ($form_state['values']['phone']) {
        $phoneParams = array(
          'phone' => $form_state['values']['phone'], 
          'location_type_id' => 1,
          'is_primary' => 1,
          'version' => 3,
        );
        if ($form_state['values']['phone_hidden']) {
          $phoneParams['id'] = $form_state['values']['phone_hidden'];
        }
        $phone = CRM_Core_BAO_Phone::add($phoneParams);
      }
      $emailParams = array(
        'email' => $form_state['values']['email'], 
        'contact_id' => NULL,
        'is_primary' => 1,
        'location_type_id' => 1,
        'version' => 3,
      );
      if ($form_state['values']['email_hidden']) {
        $emailParams['id'] = $form_state['values']['email_hidden'];
      }
      $email = CRM_Core_BAO_Email::add($emailParams);
      // create or update loc block
      $locBlockParams = array(
        'id' => ($form_state['values']['location'] != 0) ? $form_state['values']['location'] : NULL,
        'address_id' => isset($address->id) ? $address->id : NULL,
        'phone_id' => isset($phone->id) ? $phone->id : NULL,
        'email_id' => isset($email->id) ? $email->id : NULL,
        'version' => 3,
      );
      $locBlock = civicrm_api('loc_block', 'create', $locBlockParams);
      // Update the event with the loc block if new address
      if ($form_state['values']['location'] == 0) {
        $eventParams = array(
          'id' => $result['id'],
          'loc_block_id' => $locBlock['id'],
          'version' => 3,
        );
        $event = civicrm_api('event', 'create', $eventParams);
      }
      $ufjoinId = $result['id'];
      $action = "Event";
      $ufjointable = 'civicrm_event';
      $ufjoinmodule = 'CiviEvent';
      break;
    case 'petition':
      $params = array(
        'id' => isset($form_state['values']['petition_hidden']) ? $form_state['values']['petition_hidden'] : NULL,
        'version' => 3,
        'title' => $fieldArray[1],
        'activity_type_id' => '32',
        'instructions' => $fieldArray[3],
      );
 
      $result = civicrm_api('survey', 'create' ,$params);
      $action = "Petition";
      $ufjoinId = $result['id'];
      $ufjointable = 'civicrm_survey';
      $ufjoinmodule = 'CiviCampaign';
      break;
  }
  if ($ufjoinId && $ufjointable && $ufjoinmodule && $new) {
    $params = array(
      'module' => $ufjoinmodule,
      'entity_table' => $ufjointable,
      'entity_id' => $ufjoinId,
      'weight' => 2,
      'uf_group_id' => $profile->id,
      'is_active' => 1,
      'version' => 3,
      'sequential' => 1,
    );
 
    civicrm_api('uf_join', 'create', $params);
  }
  if ($http_value) {
    global $base_url;
    CRM_Utils_System::getServerResponse($base_url.'/operation?value='.$http_value);
  }
  $form_state['redirect'] = 'call-to-action-selection';
}


function campaigntool_civicrm_postprocess($formName, &$form) {
  if ($formName == "CRM_Event_Form_Registration_Register") {
    CRM_Utils_System::redirect(CRM_Utils_System::url('', "title={$form->_values['event']['title']}&context=event"));
  }
  if ($formName == "CRM_Campaign_Form_Petition_Signature") {
    CRM_Utils_System::redirect(CRM_Utils_System::url('', "title={$form->petition['title']}&context=petition"));
  }
  if ($formName == "CRM_Profile_Form_Edit") {
    CRM_Utils_System::redirect(CRM_Utils_System::url('', "id={$form->getVar('_gid')}&context=subscription"));
  }
}

function campaigntool_node_view($node) {
}

function campaigntool_civicrm_buildForm($formName, &$form) { 
  
  if ($formName == "CRM_Profile_Form_Edit" || 
    $formName == "CRM_Event_Form_Registration_Register"|| 
    $formName == "CRM_Campaign_Form_Petition_Signature") {
    CRM_Core_Region::instance('page-body')->add(array(
        'template' => 'CRM/Extra/ModifyTpl.tpl',
      ));
     
    switch ($formName) {
      case "CRM_Profile_Form_Edit":
        $afterDivname = '#crm-profile-block';
        $eachDivName = '#crm-profile-block';
        break;
      case "CRM_Event_Form_Registration_Register":
        $afterDivname = '#billing-payment-block';
        $eachDivName = '.crm-profile';
        $buttonText = 'Register Now';
        break;
      case "CRM_Campaign_Form_Petition_Signature":
        $afterDivname = '.crm-petition-activity-profile';
        $eachDivName = '.crm-petition-contact-profile';
        break;
    }
    if ($buttonText) {
    $form->assign('buttonText', $buttonText);
    }
    $form->assign('afterdiv', $afterDivname);
    $form->assign('eachdiv', $eachDivName);
  } 
}

function campaigntool_init() {
  civicrm_initialize();
  if (CRM_Utils_Request::retrieve('context', 'String') == 'event') {
    drupal_set_message( t('Thank you for registering for '. CRM_Utils_Request::retrieve('title', 'String')) );
  }
  elseif (CRM_Utils_Request::retrieve('context', 'String') == 'petition') {
    drupal_set_message( t('Thank you for signing '. CRM_Utils_Request::retrieve('title', 'String')) );
  }
  elseif (CRM_Utils_Request::retrieve('context', 'String') == 'subscription') {
    $title = CRM_Core_BAO_UFGroup::getTitle(CRM_Utils_Request::retrieve('id', 'Integer'));
    drupal_set_message( t('Thank you for subscribing to '. $title) );
  }
}
/**
 * Implements hook_webform_submission_presave().
 * Initial submission processing - saves contacts.
 */
function campaigntool_webform_submission_presave(&$node, &$submission) {
  if (!empty($submission->file_usage['added_fids']) && !empty($node->webform_civicrm['data']['activity'])) {
    $name = array('proof_of_date_of_birth', 'pm_greetings_request_letter');
    $count = 0;
    $config = CRM_Core_Config::singleton();
    foreach ($node->webform['components'] as $key => $value) {
      if (in_array($value['form_key'], $name)) {
        $count++;
        if (array_key_exists($key, $submission->data) && !empty($submission->data[$key]['value'][0])) {
          $file = file_load($submission->data[$key]['value'][0]);
          $filepath = drupal_realpath($file->uri);
          $fname = ($value['form_key'] == 'pm_greetings_request_letter') ? 'Letter_' : 'Proof of Date of Birth_';
          $newFileName = $config->uploadDir . $fname . md5(date('YmdHis')) . '.' . pathinfo($filepath, PATHINFO_EXTENSION);;
          copy($filepath, $newFileName);
          $node->webform_civicrm['data']['activity'][1]['activity'][1]['attachFile_' . $count] = array(
            'uri' => $newFileName,
            'type' => $file->filemime,
            'location' => $newFileName,
            'upload_date' => date('YmdHis'),
          );
          file_delete($file);
        }
        if ($count == 2) {
          break;
        }
      }
    }
  }
}

function campaigntool_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "webform_client_form_288") {
    $form['#attached']['js'][] = drupal_get_path('module', 'campaigntool') . '/campaigntool_webform.js';
    $form['#validate'][]='campaigntool_form_webform_validate';
    return $form;
  }
}



function campaigntool_form_webform_validate($form,&$form_state) {
  $occasion = $form_state['values']['submitted']['civicrm_1_contact_1_fieldset_fieldset']['occasion'];
  $flag = FALSE;
  foreach ($form_state['values']['submitted']['greetings_requested_from'] as $fieldset => $field) {
    if ((is_array($field) && current($field) !== 0) || ($fieldset === 'mp' && $fieldset !== 0)) {
      $flag = TRUE;
      break;
    }
  }
  if ($flag) {
    form_set_error('greetings_requested_from', t('Please select atleast one person you wish to receive greetings from.'));
  }
  if ($occasion === 'birthday' 
    && $form_state['values']['submitted']['greetings_requested_from']['queen_proof_required']['queen'] === 'queen' 
    && $form_state['values']['submitted']['greetings_requested_from']['proof_of_date_of_birth'] == 0
  ) {
    form_set_error('proof_of_date_of_birth', t('Please submit your proof of date of birth'));
  }

  $years = $form_state['values']['submitted']['civicrm_1_contact_1_fieldset_fieldset']['number_of_years'];
  switch ($occasion) {
    case 'birthday':
      if ($form_state['values']['submitted']['greetings_requested_from']['queen_proof_required']['queen'] === 'queen' && $years < 100) {
        form_set_error('queen_proof_required', t('Number of years not enough to receive greetings from Queen!'));
      }
      if ($form_state['values']['submitted']['greetings_requested_from']['governor_general']['governor-general'] === 'governor-general' && $years < 90) {
        form_set_error('governor-general', t('Number of years not enough to receive greetings from Governor General!'));
      }
      if ($form_state['values']['submitted']['greetings_requested_from']['prime_minister']['pm'] === 'pm'
        && $form_state['values']['submitted']['greetings_requested_from']['pm_greetings_request_letter'] == 0
        && $years < 75
      ) {
        form_set_error('prime_minister', t('Number of years not enough to receive greetings from Prime Minister!'));
      }
      if ($form_state['values']['submitted']['greetings_requested_from']['prime_minister']['pm'] === 'pm' 
        && $form_state['values']['submitted']['greetings_requested_from']['pm_greetings_request_letter'] != 0
        && $years < 65
      ) {
        form_set_error('prime_minister', t('Number of years not enough to receive greetings from Prime Minister!'));
      }
      if ($form_state['values']['submitted']['greetings_requested_from']['opposition_leader']['opposition'] === 'opposition' && $years < 75) {
        form_set_error('opposition', t('Number of years not enough to receive greetings from Opposition Leader!'));
      }
      if ($form_state['values']['submitted']['greetings_requested_from']['bc_protocol']['bc'] === 'bc' && $years < 75) {
        form_set_error('bc_protocol', t('Number of years not enough to receive greetings from BC Protocol!'));
      }
      if ($form_state['values']['submitted']['greetings_requested_from']['lieutenant_governor']['lieutenant'] === 'lieutenant' && $years < 90) {
        form_set_error('lieutenant_governor', t('Number of years not enough to receive greetings from Lieutenant Governor!'));
      }
      if ($form_state['values']['submitted']['greetings_requested_from']['mla']['mla'] === 'mla' && $years < 75) {
        form_set_error('mla', t('Number of years not enough to receive greetings from MLA!'));
      }
      break;
    case 'anniversary':
      if ($form_state['values']['submitted']['greetings_requested_from']['queen_proof_required']['queen'] === 'queen' && $years < 65) {
        form_set_error('queen_proof_required', t('Number of years not enough to receive greetings from Queen!'));
      }
      if ($form_state['values']['submitted']['greetings_requested_from']['governor_general']['governor-general'] === 'governor-general' && $years < 50) {
        form_set_error('governor_general', t('Number of years not enough to receive greetings from Governor General!'));
      }
      if ($form_state['values']['submitted']['greetings_requested_from']['prime_minister']['pm'] === 'pm' && $years < 25) {
        form_set_error('prime_minister', t('Number of years not enough to receive greetings from Prime Miwnister!'));
      }
      if ($form_state['values']['submitted']['greetings_requested_from']['opposition_leader']['opposition'] === 'opposition' && $years < 25) {
        form_set_error('opposition', t('Number of years not enough to receive greetings from Opposition Leader!'));
      }
      if ($form_state['values']['submitted']['greetings_requested_from']['bc_protocol']['bc'] === 'bc' && $years < 25) {
        form_set_error('bc_protocol', t('Number of years not enough to receive greetings from BC Protocol!'));
      }
      if ($form_state['values']['submitted']['greetings_requested_from']['lieutenant_governor']['lieutenant'] === 'lieutenant' && $years < 50) {
        form_set_error('lieutenant_governor', t('Number of years not enough to receive greetings from Lieutenant Governor!'));
      }
      if ($form_state['values']['submitted']['greetings_requested_from']['mla']['mla'] === 'mla' && $years < 25) {
        form_set_error('mla', t('Number of years not enough to receive greetings from MLA!'));
      }
      break;
  }
}