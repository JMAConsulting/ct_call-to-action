<?php

function campaigntool_menu() {
  $items = array();

  $items['call-to-action-entry'] = array(
    'title' => 'Enter an Action', 
    'description' => 'Use this form to enter in various calls to action (Events, Petitions or Subscriptions)',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('campaigntool_form'), 
    'access callback' => TRUE
  );
  $items['call-to-action-delete/%'] = array(
    'page callback' => 'campaigntool_cta_delete',
    'page arguments' => array(1), 
    'access callback' => TRUE
  );

  return $items;
}

function campaigntool_cta_delete($action) {
  civicrm_initialize();
  $id = explode('-', $action);
  if ($id[0] == 'event') {
    $params = array(
      'id' => $id[1],
      'version' => 3,
    );
    $result = civicrm_api( 'event','delete',$params );
  }
  elseif($id[0] == 'petition') {
    $params = array(
      'id' => $id[1],
      'version' => 3,
    );
    $result = civicrm_api( 'survey','delete',$params );
  }
  elseif($id[0] == 'profile') {
    $params = array(
      'id' => $id[1],
      'version' => 3,
    );
    $result = civicrm_api( 'uf_group','delete',$params );
  }

  if ($result) {
    echo 1;
  }
  CRM_Utils_System::civiExit();
}

function campaigntool_form($form, &$form_state) {
  civicrm_initialize();
  $locationEvents = CRM_Event_BAO_Event::getLocationEvents();
  $locationEvents[0] = "-- select --";
  ksort($locationEvents);
  $stateProvince = CRM_Core_PseudoConstant::stateProvince();
  $country = CRM_Core_PseudoConstant::country();
  $locations = array(
    1 => 'Create new location',
    2 => 'Use Existing Location',
  );
  $options = array(
    'event' => 'Event',
    'petition' => 'Petition',
    'subscription' => 'Subscription',
  );
  $form['action_type'] = array(
    '#type' => 'select',
    '#title' => 'Type of Action?',
    '#required' => TRUE,
    '#options' => $options,
  ); 
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => 'Title',
    '#required' => TRUE, 
  ); 
  $form['summary'] = array(
    '#type' => 'textfield',
    '#title' => 'Summary',
    '#required' => TRUE, 
  );
  $form['start_date'] = array(
    '#type' => 'date_popup',
    '#title' => 'Event Start Date',
    '#default_value' => date('Y-m-d'),
    '#date_format' => 'Y-m-d g:i a',
    '#date_label_position' => 'within',
    '#date_increment' => 15,
    '#date_year_range' => '0:+2',
  );
  $form['end_date'] = array(
    '#type' => 'date_popup',
    '#title' => 'Event End Date',
    '#default_value' => date('Y-m-d'),
    '#date_format' => 'Y-m-d g:i a',
    '#date_label_position' => 'within',
    '#date_increment' => 15,
    '#date_year_range' => '0:+2',
  );
  $form['location_fieldset'] = array(
    '#title' => t("Event Location"),
    '#prefix' => '<div id="address-wrapper">',
    '#suffix' => '</div>',
    '#type' => 'fieldset',
  );
  $form['location_fieldset']["location_type"] = array(
    '#type' => 'radios',
    '#title' => "Choose Location",
    '#options' => $locations,
    '#prefix' => '<div id="location-choice-wrapper">',
    '#suffix' => '</div>',
  );
  $form['location_fieldset']["location"] = array(
      '#type' => 'select',
      '#title' => "Use Location",
      '#options' => $locationEvents,
      '#prefix' => '<div id="location-choose-wrapper">',
      '#suffix' => '</div>',
      '#ajax' => array(
        'callback' => 'address_fill_callback',
        'wrapper' => 'address-wrapper',
      ),
    );
  $form['location_fieldset']["street_address"] = array(
      '#type' => 'textfield',
      '#title' => "Street Address",
    );
  $form['location_fieldset']["add1_address"] = array(
      '#type' => 'textfield',
      '#title' => "Addt'l Address 1",
    );
  $form['location_fieldset']["add2_address"] = array(
      '#type' => 'textfield',
      '#title' => "Addt'l Address 2",
    );
  $form['location_fieldset']["city"] = array(
      '#type' => 'textfield',
      '#title' => "City",
    );
  $form['location_fieldset']["zip"] = array(
      '#type' => 'textfield',
      '#title' => "ZipCode",
    );
  $form['location_fieldset']["suffix"] = array(
      '#type' => 'textfield',
      '#title' => "Suffix",
    );
  $form['location_fieldset']["country"] = array(
      '#type' => 'select',
      '#title' => "City",
      '#options' => $country,
    );
  $form['location_fieldset']["state"] = array(
      '#type' => 'select',
      '#title' => "State/Province",
      '#options' => $stateProvince,
    );
  $form['location_fieldset']["email"] = array(
      '#type' => 'textfield',
      '#title' => "Email",
    );
  $form['location_fieldset']["phone"] = array(
      '#type' => 'textfield',
      '#title' => "Phone",
    );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => 'Description',
    '#required' => TRUE, 
  );
  $form['link'] = array(
    '#type' => 'textfield',
    '#title' => 'More Link text',
    '#required' => TRUE,
  ); 
  $form['location_fieldset']['address_hidden'] = array(
    '#type' => 'hidden',
    '#title' => 'Address Hidden',
  );
  $form['location_fieldset']['email_hidden'] = array(
    '#type' => 'hidden',
    '#title' => 'Email Hidden',
  );
  $form['location_fieldset']['phone_hidden'] = array(
    '#type' => 'hidden',
    '#title' => 'Phone Hidden',
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  
  drupal_add_js(drupal_get_path('module', 'campaigntool') .'/campaigntool.js');
  return $form;
}

function address_fill_callback($form, &$form_state) {
  $addressId = CRM_Core_DAO::getFieldValue('CRM_Core_DAO_LocBlock', $form_state['values']['location'], 'address_id');
  $emailId = CRM_Core_DAO::getFieldValue('CRM_Core_DAO_LocBlock', $form_state['values']['location'], 'email_id');
  $phoneId = CRM_Core_DAO::getFieldValue('CRM_Core_DAO_LocBlock', $form_state['values']['location'], 'phone_id');
  $addressParams = array(
    'id' => $addressId,
    'version' => 3,
  );
  $address = civicrm_api('Address', 'get', $addressParams);
  $addressParams['id'] = $emailId;
  $email = civicrm_api('Email', 'get', $addressParams);
  $addressParams['id'] = $phoneId;
  $phone = civicrm_api('Phone', 'get', $addressParams);
  $form['location_fieldset']["street_address"]['#value'] = $address['values'][$addressId]['street_address'];
  $form['location_fieldset']["add1_address"]['#value'] = $address['values'][$addressId]['supplementary_address_1'];
  $form['location_fieldset']["add2_address"]['#value'] = $address['values'][$addressId]['supplementary_address_2'];
  $form['location_fieldset']["city"]['#value'] = $address['values'][$addressId]['city'];
  $form['location_fieldset']["zip"]['#value'] = $address['values'][$addressId]['postal_code'];
  $form['location_fieldset']["suffix"]['#value'] = $address['values'][$addressId]['postal_code_suffix'];
  $form['location_fieldset']["country"]['#value'] = $address['values'][$addressId]['country_id'];
  $form['location_fieldset']["state"]['#value'] = $address['values'][$addressId]['state_province_id'];
  $form['location_fieldset']["email"]['#value'] = $email['values'][$emailId]['email'];
  $form['location_fieldset']["phone"]['#value'] = $phone['values'][$phoneId]['phone'];
  $form['location_fieldset']["address_hidden"]['#value'] = $addressId;
  $form['location_fieldset']["phone_hidden"]['#value'] = $phoneId;
  $form['location_fieldset']["email_hidden"]['#value'] = $emailId;
  return $form['location_fieldset'];
}

function campaigntool_form_submit($form, &$form_state) {

  civicrm_initialize();
  $params['type'] = $form_state['values']['action_type'];
  $fieldArray = array(
    1 => $form_state['values']['title'], //Title
    2 => $form_state['values']['summary'], //Summary
    3 => $form_state['values']['description'], //Description
    4 => $form_state['values']['link'], //More Link Name
  );
  $gid = 14;
  $profile = CRM_Core_BAO_UFGroup::copy($gid);
  $profile->title = $fieldArray[1];
  $profile->save();
  $ufjoinId = $ufjointable = NULL;
  $query = "DELETE FROM civicrm_uf_join
WHERE uf_group_id = {$profile->id} AND module != 'Profile'";
  CRM_Core_DAO::executeQuery($query);
  $save = new CRM_Core_DAO_UFField();
  
  $query = "SELECT id, weight FROM civicrm_uf_field WHERE uf_group_id = $profile->id
AND field_type = 'Formatting'";
  $ufField = CRM_Core_DAO::executeQuery($query);
  while ($ufField->fetch()) {
    $save->id = $ufField->id;
    $save->help_pre = $fieldArray[$ufField->weight];
    $save->save();
  }
  switch ($params['type']) {
    case 'subscription':
      $action = "Subscription";
      break;

    case 'event':
      $params = array(
        'title' => $fieldArray[1],
        'summary' => $fieldArray[2],
        'description' => $fieldArray[3],
        'event_type_id' => 1,
        'start_date' => date($form_state['values']['start_date']),
        'end_date' => date($form_state['values']['end_date']),
        'loc_block_id' => ($form_state['values']['location'] != 0) ? $form_state['values']['location'] : NULL,
        'is_public' => 1,
        'is_online_registration' => 1,
        'is_monetary' => 0,
        'is_active' => 1,
        'version' => 3,
      );
 
      $result = civicrm_api('event', 'create', $params);
      // create or update the address
      $addressParams = array( 
        'location_type_id' => 1,
        'street_address' => $form_state['values']['street_address'],
        'supplemental_address_1' => $form_state['values']['add1_address'],
        'supplemental_address_2' => $form_state['values']['add2_address'],
        'postal_code' => $form_state['values']['zip'],
        'postal_code_suffix' => $form_state['values']['suffix'],
        'country_id' => $form_state['values']['country'],
        'state_province_id' => $form_state['values']['state'],
        'city' => $form_state['values']['city'],
        'is_primary' => 1,
        'version' => 3,
      );
      if ($form_state['values']['address_hidden']) {
        $addressParams['id'] = $form_state['values']['address_hidden'];
      }
      $address = CRM_Core_BAO_Address::add($addressParams, TRUE);
      if ($form_state['values']['phone']) {
        $phoneParams = array(
          'phone' => $form_state['values']['phone'], 
          'location_type_id' => 1,
          'is_primary' => 1,
          'version' => 3,
        );
        if ($form_state['values']['phone_hidden']) {
          $phoneParams['id'] = $form_state['values']['phone_hidden'];
        }
        $phone = CRM_Core_BAO_Phone::add($phoneParams);
      }
      $emailParams = array(
        'email' => $form_state['values']['email'], 
        'contact_id' => NULL,
        'is_primary' => 1,
        'location_type_id' => 1,
        'version' => 3,
      );
      if ($form_state['values']['email_hidden']) {
        $emailParams['id'] = $form_state['values']['email_hidden'];
      }
      $email = CRM_Core_BAO_Email::add($emailParams);
      // create or update loc block
      $locBlockParams = array(
        'id' => ($form_state['values']['location'] != 0) ? $form_state['values']['location'] : NULL,
        'address_id' => $address->id,
        'phone_id' => $phone->id,
        'email_id' => $email->id,
        'version' => 3,
      );
      $locBlock = civicrm_api('loc_block', 'create', $locBlockParams);
      // Update the event with the loc block if new address
      if ($form_state['values']['location'] == 0) {
        $eventParams = array(
          'id' => $result['id'],
          'loc_block_id' => $locBlock['id'],
          'version' => 3,
        );
        $event = civicrm_api('event', 'create', $eventParams);
      }
      $ufjoinId = $result['id'];
      $action = "Event";
      $ufjointable = 'civicrm_event';
      $ufjoinmodule = 'CiviEvent';
      break;
    case 'petition':
      $params = array(
        'version' => 3,
        'title' => $fieldArray[1],
        'activity_type_id' => '32',
        'instructions' => $fieldArray[3],
      );
 
      $result = civicrm_api('survey', 'create' ,$params);
      $action = "Petition";
      $ufjoinId = $result['id'];
      $ufjointable = 'civicrm_survey';
      $ufjoinmodule = 'CiviCampaign';
      break;
  }
  if ($ufjoinId && $ufjointable && $ufjoinmodule) {
    $params = array(
      'module' => $ufjoinmodule,
      'entity_table' => $ufjointable,
      'entity_id' => $ufjoinId,
      'weight' => 2,
      'uf_group_id' => $profile->id,
      'is_active' => 1,
      'version' => 3,
      'sequential' => 1,
    );
 
    civicrm_api('uf_join', 'create', $params);
  }
}


function campaigntool_civicrm_postprocess($formName, &$form) {
  if ($formName == "CRM_Event_Form_Registration_Register") {
    CRM_Utils_System::redirect(CRM_Utils_System::url('', "title={$form->_values['event']['title']}&context=event"));
  }
  if ($formName == "CRM_Campaign_Form_Petition_Signature") {
    CRM_Utils_System::redirect(CRM_Utils_System::url('', "title={$form->petition['title']}&context=petition"));
  }
  if ($formName == "CRM_Profile_Form_Edit") {
    CRM_Utils_System::redirect(CRM_Utils_System::url('', "id={$form->getVar('_gid')}&context=subscription"));
  }
}

function campaigntool_node_view($node) {
}


function campaigntool_init() {
  civicrm_initialize();
  if (CRM_Utils_Request::retrieve('context', 'String') == 'event') {
    drupal_set_message( t('Thank you for registering for '. CRM_Utils_Request::retrieve('title', 'String')) );
  }
  elseif (CRM_Utils_Request::retrieve('context', 'String') == 'petition') {
    drupal_set_message( t('Thank you for signing '. CRM_Utils_Request::retrieve('title', 'String')) );
  }
  elseif (CRM_Utils_Request::retrieve('context', 'String') == 'subscription') {
    $title = CRM_Core_BAO_UFGroup::getTitle(CRM_Utils_Request::retrieve('id', 'Integer'));
    drupal_set_message( t('Thank you for subscribing to '. $title) );
  }
}